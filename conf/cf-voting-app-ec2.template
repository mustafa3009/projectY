AWSTemplateFormatVersion: '2010-09-09'
Description: Voting App Stack with ELB
Metadata: {}
Mappings: {}
Conditions: {}
Outputs: 
  AppURL: 
    Description: "URL for the voting app"
    Value: 
      Fn::Join: [ "", [ "http://", !GetAtt AppLoadBalancer.DNSName, ":8099" ] ] 
Parameters:
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t1.micro
      - t2.micro
      - t2.nano
    ConstraintDescription: Must be a valid Ec2 instance type
  KeyName:
    Description: "Name of existing key pair to enable ssh access to EC2 instances"
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of existing Ec2 key pair
    Default: MusTraining
  AvailabilityZoneELB1:
    Description: The AvailabilityZone to use for ELB, NAT/bastion host
    Type: AWS::EC2::AvailabilityZone::Name
    Default: us-east-1a
  AvailabilityZoneELB2:
    Description: The AvailabilityZone to use for ELB
    Type: AWS::EC2::AvailabilityZone::Name
    Default: us-east-1b
  AvailabilityZoneApp1:
    Description: The AvailabilityZone to use for the first App server
    Type: AWS::EC2::AvailabilityZone::Name
    Default: us-east-1a
  AvailabilityZoneApp2:
    Description: The AvailabilityZone to use for the second App server
    Type: AWS::EC2::AvailabilityZone::Name
    Default: us-east-1b
  AvailabilityZoneDB1:
    Description: The AvailabilityZone to use for the DB server
    Type: AWS::EC2::AvailabilityZone::Name
    Default: us-east-1c
  SubnetCIDRELB1:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.0.0.0/24
    Description: VPC CIDR Block for NAT/Bastion Subnet (eg 10.0.0.0/24)
    Type: String
  SubnetCIDRELB2:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.0.1.0/24
    Description: VPC CIDR Block for NAT/Bastion Subnet (eg 10.0.1.0/24)
    Type: String
  SubnetCIDRApp1:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.0.2.0/24
    Description: VPC CIDR Block for the App server1 Subnet (eg 10.0.2.0/24)
    Type: String
  SubnetCIDRApp2:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.0.3.0/24
    Description: VPC CIDR Block for the App server2 Subnet (eg 10.0.3.0/24)
    Type: String
  SubnetCIDRdb1:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.0.4.0/24
    Description: VPC CIDR Block for the DB1 Subnet (eg 10.0.4.0/24)
    Type: String

Resources:
######################## Foundation #########################
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: vpc-VotingApp
        - Key: Stack
          Value: {Ref: 'AWS::StackName'}
        - Key: Owner
          Value: rRt7BVS2GFs

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
     Tags:
        - Key: Name
          Value: igw-VotingApp
        - Key: Stack
          Value: {Ref: 'AWS::StackName'}
        - Key: Owner
          Value: rRt7BVS2GFs

  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: InternetGateway
      VpcId:
        Ref: VPC

  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: rt-pub-VotingApp
        - Key: Stack
          Value: {Ref: 'AWS::StackName'}
        - Key: Owner
          Value: rRt7BVS2GFs
      VpcId:
        Ref: VPC

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn:
      GatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
      RouteTableId:
        Ref: PublicSubnetRouteTable

  PublicSubnet01:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: 
        Ref: AvailabilityZoneELB1
      CidrBlock: 
        Ref: SubnetCIDRELB1 
      VpcId: 
        Ref: VPC    
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: subnet01-pub-VotingApp
        - Key: Description
          Value: 'Public Subnet for ELB, NAT instance / Bastion host'
        - Key: Stack
          Value: {Ref: 'AWS::StackName'}
        - Key: Owner
          Value: rRt7BVS2GFs
  
  PublicSubnet02:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: 
        Ref: AvailabilityZoneELB2
      CidrBlock: 
        Ref: SubnetCIDRELB2 
      VpcId: 
        Ref: VPC    
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: subnet02-pub-VotingApp
        - Key: Description
          Value: 'Public Subnet for ELB'
        - Key: Stack
          Value: {Ref: 'AWS::StackName'}
        - Key: Owner
          Value: rRt7BVS2GFs

  PublicSubnetAssocToPublicRouteTable01:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicSubnetRouteTable
      SubnetId:
        Ref: PublicSubnet01 

  PublicSubnetAssocToPublicRouteTable02:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicSubnetRouteTable
      SubnetId:
        Ref: PublicSubnet02 


  NATnBastionHost: 
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: ami-184dc970
      InstanceType: 
        Ref: InstanceType
      KeyName: 
        Ref: KeyName
      BlockDeviceMappings: 
        - DeviceName: "/dev/xvda"
          Ebs: 
            VolumeType: "gp2"
            DeleteOnTermination: 'true'
            VolumeSize: "8"
      NetworkInterfaces: 
      - AssociatePublicIpAddress: 'true'
        DeviceIndex: "0"
        GroupSet: 
          - Ref: 'NATnBastionSecurityGroup'
        SubnetId: 
          Ref: 'PublicSubnet01'
      SourceDestCheck: 'false'
      Tags:
        - Key: Name
          Value: natnbastion-VotingApp
        - Key: Stack
          Value: {Ref: 'AWS::StackName'}
        - Key: Owner
          Value: rRt7BVS2GFs      

  NATnBastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'NAT/Bastion host firewall'
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 10.0.0.0/16
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: secgrp-NATnBastion-VotingApp
        - Key: Description
          Value: 'Security group for the NAT/Bastion host'
        - Key: Stack
          Value: {Ref: 'AWS::StackName'}
        - Key: Owner
          Value: rRt7BVS2GFs

########################### Application Environment ############################
  PrivateSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: rt-priv-VotingApp
        - Key: Stack
          Value: {Ref: 'AWS::StackName'}
        - Key: Owner
          Value: rRt7BVS2GFs
    
  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId:
        Ref: NATnBastionHost
      RouteTableId:
        Ref: PrivateSubnetRouteTable

  PrivateSubnetApp01:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: 
        Ref: AvailabilityZoneApp1 
      CidrBlock: 
        Ref : SubnetCIDRApp1
      VpcId: 
        Ref: VPC
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: subnet01-priv-app-VotingApp
        - Key: Description
          Value: 'Private Subnet 1 to host the application servers'
        - Key: Stack
          Value: {Ref: 'AWS::StackName'}
        - Key: Owner
          Value: rRt7BVS2GFs

  PrivateSubnetApp02:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: 
        Ref: AvailabilityZoneApp2
      CidrBlock: 
        Ref: SubnetCIDRApp2
      VpcId: 
        Ref: VPC
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: subnet02-priv-app-VotingApp
        - Key: Description
          Value: 'Private Subnet 2 to host the application servers'
        - Key: Stack
          Value: {Ref: 'AWS::StackName'}
        - Key: Owner
          Value: rRt7BVS2GFs
          
  PrivateSubnet01AssocToPrivateRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PrivateSubnetRouteTable
      SubnetId:
        Ref: PrivateSubnetApp01
  
  PrivateSubnet02AssocToPrivateRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PrivateSubnetRouteTable
      SubnetId:
        Ref: PrivateSubnetApp02

  AppServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'App Server firewall'
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 10.0.0.0/16
        - IpProtocol: tcp
          FromPort: '8099'
          ToPort: '8099'
          CidrIp: 10.0.0.0/16
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupId: 
            Ref: LBSecurityGroup   
      Tags:
        - Key: Name
          Value: secgrp-AppServer-VotingApp
        - Key: Description
          Value: 'Security group for App Server'
        - Key: Stack
          Value: {Ref: 'AWS::StackName'}
        - Key: Owner
          Value: rRt7BVS2GFs    
  
  LBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Load balancer firewall
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '8099'
          ToPort: '8099'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: secgrp-LoadBalancer-VotingApp
        - Key: Description
          Value: 'Security group for Load Balancer'
        - Key: Stack
          Value: {Ref: 'AWS::StackName'}
        - Key: Owner
          Value: rRt7BVS2GFs

########################### Load Balancers and Autoscaling groups ############################
  AppServerAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
      - DBServer01
    CreationPolicy:
      ResourceSignal:
        Count: '1'
        Timeout: PT15M
 
    Properties:
      AvailabilityZones:
        - Ref : AvailabilityZoneApp1
        - Ref : AvailabilityZoneApp2
      VPCZoneIdentifier:
        - Ref: PrivateSubnetApp01
        - Ref: PrivateSubnetApp02  
      LaunchConfigurationName:
        Ref: AppServerLaunchConfig
      MinSize: '2'
      MaxSize: '2'
#      LoadBalancerNames:
#      - Ref: AppLoadBalancer
      TargetGroupARNs:
        - Ref: TargetGroupELB
      HealthCheckType: ELB
      HealthCheckGracePeriod: 120
      Tags:
        - Key: Name
          Value: autoscalinggroup-App-VotingApp
          PropagateAtLaunch : 'true'
        - Key: Description
          Value: 'Auto scaling group for App servers'
          PropagateAtLaunch : 'true'
        - Key: Stack
          Value: {Ref: 'AWS::StackName'}
          PropagateAtLaunch : 'true'
        - Key: Owner
          Value: rRt7BVS2GFs
          PropagateAtLaunch : 'true'
 
  AppServerLaunchConfig: 
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Properties: 
      KeyName: 
        Ref: "KeyName"
      ImageId: "ami-8c1be5f6"
      SecurityGroups: 
        - Ref: "AppServerSecurityGroup"
      InstanceType: 
        Ref: "InstanceType"
      BlockDeviceMappings: 
        - DeviceName: "/dev/xvda"
          Ebs: 
            VolumeSize: "8"
            VolumeType: "gp2"
            DeleteOnTermination: "true"
      AssociatePublicIpAddress: "false"    
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo "Initializing voting app"
          yum update -y
          #install java 8 and set it as default
          yum install -y java-1.8.0-openjdk
          alternatives --set java /usr/lib/jvm/jre-1.8.0-openjdk.x86_64/bin/java
          #install git and download the jar from git 
          yum install -y git
          cd /opt && git clone -b artifacts --single-branch https://github.com/ThoughtWorksInc/voter-service.git --depth 1
          #Launch the spring boot app
          nohup java -jar -Dspring.data.mongodb.host=10.0.4.4 /opt/voter-service/voter-service-0.2.35.jar &
          sleep 10s
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource AppServerAutoScalingGroup --region ${AWS::Region}
#          yum install httpd24 php56 -y
#          service httpd start
#          chkconfig httpd on
#          groupadd www
#          usermod -a -G www ec2-user
#          chown -R root:www /var/www
#          chmod 2775 /var/www
#          find /var/www -type d -exec chmod 2775 {} +
#          find /var/www -type f -exec chmod 0664 {} +
#          echo "<?php phpinfo(); ?>" > /var/www/html/phpinfo.php
      
  AppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
      - Ref: PublicSubnet01
      - Ref: PublicSubnet02
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '60'
      SecurityGroups:
      - Ref: LBSecurityGroup
      Tags:
        - Key: Name
          Value: elb-App-VotingApp
        - Key: Description
          Value: 'Load Balancer for application server'
        - Key: Stack
          Value: {Ref: 'AWS::StackName'}
        - Key: Owner
          Value: rRt7BVS2GFs

  TargetGroupELB:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 20
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 6
      HealthCheckPath: /health
#      Matcher:
#        HttpCode: '200'
      Name: ELB-target-group
      Port: 8099
      Protocol: HTTP
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '20'
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: elb-App-VotingApp
        - Key: Description
          Value: 'Load Balancer for application server'
        - Key: Stack
          Value: {Ref: 'AWS::StackName'}
        - Key: Owner
          Value: rRt7BVS2GFs

  ListenerELB:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: TargetGroupELB
      LoadBalancerArn:
        Ref: AppLoadBalancer
      Port: 8099
      Protocol: HTTP         